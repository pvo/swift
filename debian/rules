#!/usr/bin/make -f

export MASTER_HEAD=`git log -1 --format=%h master`
export DEVELOPMENT_HEAD=`git log -1 --format=%h development`
export TIMESTAMP=`date +%Y%m%d%H%M`
export VERSION=`python setup.py -V | tail -n1`
export GITREV=`git rev-list --all | wc -l`
export CHANGELOGENTRY="$(VERSION)-$(TIMESTAMP)-$(GITREV)-$(MASTER_HEAD)"

%:
	dh $@ --with python2

# If you want to run an automated build (for something like Jenkins), 
# this is the thing for you.  Just run:
#
#   debian/rules automated-build
#
automated-build:
	# Make a backup of the upstream debian/control
	cp -av debian/control debian/control.pristine

	# Add the current git hash to the Description field of the package
	sed -i "s/^Description: .*$$/& (master: $(MASTER_HEAD) development: $(DEVELOPMENT_HEAD))/" debian/control

	# Update the changelog
	dch -v $(CHANGELOGENTRY) "Automated build."

	# Clean up
	dh clean --with python2

	# Drop in the full git log as well as the last commit
	git log --decorate=full --oneline  | gzip -vc > fullgitlog-tempo.gz
	git log -n 1 > lastcommit-tempo.txt

	# Build it
	dh build --with python2
	fakeroot dh binary --with python2

	# Put the upstream debian/control back in place
	mv -v debian/control.pristine debian/control

override_dh_auto_clean:

override_dh_auto_build:

override_dh_install:
	dh_install --fail-missing

override_dh_installinit:
	dh_installinit --name swift
